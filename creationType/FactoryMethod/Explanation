# Intent
# 定义了一个创建对象的接口-Factory，但由子类(ConcreteFactory( ,1,2))决定要实例化哪个类。工厂方法把实例化操作推迟到子类。

# Class Diagram
# 在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。

# 面向对象设计的基本原则：
# OCP（开闭原则，Open-Closed Principle）：一个软件的实体应当对扩展开放，对修改关闭。
# DIP（依赖倒转原则，Dependence Inversion Principle）：需要针对接口编程，不要对实现编程。
# LoD（迪米特法则，Law of Demeter）：只与你直接的朋友通信，而避免和陌生人通信。

# 简单工厂和工厂方法的比较：
# 1.结构复杂度-简单工厂模式要占优。简单工厂模式只需要一个工厂类，而工厂方法模式的工厂类随着产品类个数增加而增加。
# 2.代码复杂度-简单工厂模式的工厂类随着产品类的增加需要增加很多方法，而工厂方法模式每个具体工厂类只完成单一任务，代码简洁。
# 3.客户端编程难度-工厂方法模式虽然在工厂类结构中引入了接口从而满足了OCP，但是在客户端编码中需要对工厂类进行实例化。
# 而简单工厂模式的工厂类中初始化产品的方法放在静态方法中，工厂类在客户端无需实例化，这无疑是一个吸引人的优点。
# 4.管理上的难度-工厂方法模式完全满足OCP，即它有非常良好的扩展性。简单工厂同样具有良好的扩展性--扩展的时候仅需要修改少量代码（修改工厂类的代码）就可以满足扩展性的要求了。
# 尽管这样没有完全满足OCP，但是我们不需要太拘泥于设计理论，要知道，sun提供的java官方工具包中也有很多没有满足OCP的例子。

# 根据设计理论建议：工厂方法模式。但实际上，我们一般都用简单工厂模式。